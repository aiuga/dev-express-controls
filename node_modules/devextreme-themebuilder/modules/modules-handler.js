"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ModulesHandler = function () {
    function ModulesHandler(widgetsList) {
        _classCallCheck(this, ModulesHandler);

        this.SPECIAL_COMMENT = "tb_widgets_list";
        this.FILE_FOR_PARSING = "theme.less";

        this.widgets = (widgetsList || []).map(function (w) {
            return w.toLowerCase();
        });

        this.bundledWidgets = [];
        this.unusedWidgets = [];
    }

    _createClass(ModulesHandler, [{
        key: "getWidgetFromImport",
        value: function getWidgetFromImport(importString) {
            var lastSlashIndex = importString.lastIndexOf("/");
            var fileName = importString.substr(lastSlashIndex + 1);
            var dotIndex = fileName.indexOf(".");
            return fileName.substr(0, dotIndex);
        }
    }, {
        key: "availableWidgets",
        value: function availableWidgets(less) {
            var _this = this;

            var widgets = [];
            var widgetsListIndex = less.indexOf(this.SPECIAL_COMMENT);

            if (widgetsListIndex >= 0) {
                less.substr(widgetsListIndex + this.SPECIAL_COMMENT.length).split("\n").filter(function (item) {
                    return !!item;
                }).forEach(function (importString) {
                    widgets.push({
                        name: _this.getWidgetFromImport(importString).toLowerCase(),
                        import: importString
                    });
                });
            }

            return widgets;
        }
    }, {
        key: "lessPlugin",
        value: function lessPlugin() {
            var _this2 = this;

            var getFileNameFromContext = function getFileNameFromContext(context) {
                var fullPath = context && context.fileInfo && context.fileInfo.filename;

                if (typeof fullPath !== "string") {
                    return null;
                }

                var fileNameIndex = fullPath.lastIndexOf('/');
                if (fileNameIndex < 0) {
                    fileNameIndex = fullPath.lastIndexOf('\\');
                }

                return fullPath.substr(fileNameIndex + 1);
            };

            var removeUnnecessaryWidgets = function removeUnnecessaryWidgets(less) {
                var availableWidgets = _this2.availableWidgets(less);

                if (_this2.widgets.length > 0) {
                    availableWidgets.forEach(function (widget) {
                        if (_this2.widgets.indexOf(widget.name) < 0) {
                            less = less.replace(widget.import, "");
                        } else {
                            _this2.bundledWidgets.push(widget.name);
                        }
                    });

                    _this2.unusedWidgets = _this2.widgets.filter(function (w) {
                        return _this2.bundledWidgets.indexOf(w) < 0;
                    });
                } else {
                    _this2.bundledWidgets = availableWidgets.map(function (w) {
                        return w.name;
                    });
                }

                return less;
            };

            return {
                install: function install(_, pluginManager) {
                    pluginManager.addPreProcessor({
                        process: function process(less, context) {
                            var fileName = getFileNameFromContext(context);

                            if (fileName === _this2.FILE_FOR_PARSING) {
                                less = removeUnnecessaryWidgets(less);
                            }

                            return less;
                        }
                    });
                }
            };
        }
    }]);

    return ModulesHandler;
}();

module.exports = ModulesHandler;